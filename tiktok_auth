// TikTok OAuth Authentication Process

// TikTok OAuth credentials
static const String clientKey = 'sbawaykwkqr81rd92h';
static const String clientSecret = '6cYEjo0MhGGOYhK38eOrDJcS0OQRcMfc';
  
// Assicurati che questo redirect URI sia esattamente lo stesso configurato sul portale sviluppatori TikTok
static const String redirectUri = 'https://viralystsupport.info/';
  
// Schema personalizzato per app mobile - assicurati che sia configurato nel tuo AndroidManifest.xml
static const String customSchemeRedirectUri = 'viralyst://auth/tiktok-callback';
  
static const String authBaseUrl = 'https://www.tiktok.com/v2/auth/authorize/';
static const String tokenUrl = 'https://open.tiktokapis.com/v2/oauth/token/';
static const String scopes = 'video.publish,video.upload,user.info.basic,user.info.stats,video.list';

// Generatore di numeri casuali
final Random _random = Random();

// 1. Inizializzazione della gestione deep link
Future<void> _initDeepLinkHandling() async {
  print('Initializing deep link handling...');
  final appLinks = AppLinks();
  
  // Handle initial link
  final initialLink = await appLinks.getInitialAppLink();
  print('Initial link: $initialLink');
  if (initialLink != null) {
    _handleIncomingLink(initialLink.toString());
  }

  // Handle incoming links
  _linkSubscription = appLinks.uriLinkStream.listen((Uri? uri) {
    print('Received deep link: $uri');
    if (uri != null) {
      _handleIncomingLink(uri.toString());
    }
  }, onError: (err) {
    print('Error handling incoming links: $err');
  });

  // Aggiungiamo la gestione per il link diretto su https://viralystsupport.info/
  // che TikTok usa come redirect_uri quando l'utente completa l'autorizzazione
  if (initialLink == null) {
    try {
      // Utilizziamo il sistema Android/iOS nativo per recuperare l'intent/url iniziale
      final platformData = await appLinks.getLatestAppLink();
      print('Latest platform URI: $platformData');
      if (platformData != null && platformData.toString().startsWith('https://viralystsupport.info/')) {
        print('Detected TikTok redirect to our web URI');
        _handleIncomingLink(platformData.toString());
      }
    } catch (e) {
      print('Error checking platform URI: $e');
    }
  }
}

// 2. Gestione link in entrata dalla redirect
void _handleIncomingLink(String link) {
  print('Handling incoming link: $link');
  try {
    final uri = Uri.parse(link);
    print('Parsed URI: $uri');
    print('URI scheme: ${uri.scheme}, host: ${uri.host}, path: ${uri.path}');
    print('Query parameters: ${uri.queryParameters}');
    
    // Gestisci callback da qualsiasi source che contiene il codice di autorizzazione
    final code = uri.queryParameters['code'];
    if (code != null) {
      print('TikTok authorization code found: $code');
      _handleAuthCallback(code);
    } else {
      print('No code parameter found in callback URI: $uri');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('No authorization code received from TikTok')),
        );
      }
    }
  } catch (e) {
    print('Error parsing incoming link: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error handling TikTok callback: $e')),
      );
    }
  }
}

// 3. Avvio dell'autenticazione TikTok
Future<void> _connectTikTokAccount() async {
  try {
    setState(() => _isLoading = true);
    
    // Generiamo un timestamp e un valore casuale per evitare la cache
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final randomValue = _random.nextInt(1000000).toString();
    final dynamicState = 'state_${timestamp}_$randomValue';
    
    // Assicuriamoci che il redirectUri corrisponda esattamente a quello registrato nel portale TikTok
    // IMPORTANTE: Deve includere lo slash finale se registrato così nel portale TikTok
    print('Using redirect URI: $redirectUri');
    
    // Codifichiamo correttamente il redirectUri per l'URL
    final encodedRedirectUri = Uri.encodeComponent(redirectUri);
    print('Encoded redirect URI: $encodedRedirectUri');
    
    // Costruiamo l'URL di autorizzazione completo
    final authUri = Uri.parse('$authBaseUrl?'
        'client_key=$clientKey&'
        'scope=$scopes&'
        'response_type=code&'
        'redirect_uri=$encodedRedirectUri&'
        'state=$dynamicState');
    
    print('Launching TikTok auth URL: $authUri');
    
    if (await canLaunchUrl(authUri)) {
      print('Launching URL...');
      // Utilizziamo sempre il browser esterno per l'autenticazione TikTok
      await launchUrl(
        authUri, 
        mode: LaunchMode.externalApplication,
      );
      print('URL launched successfully');
      
      // Mostra un messaggio all'utente
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Please complete the TikTok authorization in your browser'),
            duration: Duration(seconds: 10),
          ),
        );
      }
    } else {
      print('Could not launch URL: $authUri');
      throw 'Could not launch $authUri';
    }
  } catch (e) {
    print('Error in _connectTikTokAccount: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error connecting to TikTok: $e')),
      );
    }
  } finally {
    setState(() => _isLoading = false);
  }
}

// 4. Funzione per effettuare la richiesta di token a TikTok
Future<http.Response> _requestTikTokToken(String code, String redirectUri) async {
  try {
    // Molto importante: il code deve essere URL decoded come specificato nella documentazione
    // "The authorization code from the web, iOS, Android or desktop authorization callback. 
    // The value should be URL decoded."
    final decodedCode = Uri.decodeComponent(code);
    print('Making token request with code: ${decodedCode.substring(0, decodedCode.length > 10 ? 10 : decodedCode.length)}...');
    
    // Per garantire che la richiesta sia formattata esattamente come nell'esempio cURL nella documentazione,
    // costruiamo manualmente la stringa del body seguendo l'esempio:
    // curl --location --request POST 'https://open.tiktokapis.com/v2/oauth/token/' \
    // --header 'Content-Type: application/x-www-form-urlencoded' \
    // --header 'Cache-Control: no-cache' \
    // --data-urlencode 'client_key=CLIENT_KEY' \
    // --data-urlencode 'client_secret=CLIENT_SECRET' \
    // --data-urlencode 'code=CODE' \
    // --data-urlencode 'grant_type=authorization_code' \
    // --data-urlencode 'redirect_uri=REDIRECT_URI'
    
    final bodyString = 
        'client_key=${Uri.encodeQueryComponent(clientKey)}'
        '&client_secret=${Uri.encodeQueryComponent(clientSecret)}'
        '&code=${Uri.encodeQueryComponent(decodedCode)}'
        '&grant_type=authorization_code'
        '&redirect_uri=${Uri.encodeQueryComponent(redirectUri)}';
    
    // Log dei parametri (nascondendo il client_secret per sicurezza)
    final logParams = {
      'client_key': clientKey,
      'client_secret': '********',
      'code': decodedCode.substring(0, decodedCode.length > 10 ? 10 : decodedCode.length) + '...',
      'grant_type': 'authorization_code',
      'redirect_uri': redirectUri,
    };
    print('Token request parameters: $logParams');
    print('Using manual body encoding format for maximum compatibility');
    
    // Esegui la richiesta token secondo la documentazione ufficiale TikTok
    final response = await http.post(
      Uri.parse(tokenUrl),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cache-Control': 'no-cache',
      },
      body: bodyString,
    );
    
    // Log della risposta
    print('Token response status: ${response.statusCode}');
    
    if (response.statusCode != 200) {
      print('Error in token request. Response body: ${response.body}');
    } else if (response.body.contains('"error"')) {
      print('Error returned in token response body: ${response.body}');
      
      // Estraiamo gli errori specifici per il debugging
      try {
        final errorData = json.decode(response.body);
        print('Error type: ${errorData['error']}');
        print('Error description: ${errorData['error_description']}');
        print('Log ID: ${errorData['log_id']}');
        
        // Controllo specifico per errori di redirect_uri
        if (errorData['error_description']?.toString().toLowerCase().contains('redirect_uri') == true) {
          print('REDIRECT URI MISMATCH DETECTED! This is a common issue.');
          print('Used redirect_uri: $redirectUri');
        }
      } catch (e) {
        print('Failed to parse error JSON: $e');
      }
    } else {
      print('Successful token response received');
    }
    
    return response;
  } catch (e) {
    print('Exception during token request: $e');
    rethrow;
  }
}

// 5. Gestione del callback di autorizzazione e scambio del token
Future<void> _handleAuthCallback(String code) async {
  print('Handling auth callback with code: $code');
  try {
    setState(() => _isLoading = true);
    
    // Utilizziamo lo stesso redirectUri usato nella richiesta iniziale
    // IMPORTANTE: Deve essere ESATTAMENTE lo stesso utilizzato nell'autorizzazione
    print('Using redirect URI for token exchange: $redirectUri');
    
    // Pulisci il codice rimuovendo eventuali asterischi e tutto ciò che segue
    String cleanCode = code;
    if (cleanCode.contains('*')) {
      cleanCode = cleanCode.split('*')[0];
      print('Cleaned code for token request: $cleanCode');
    }
    
    // Effettua la richiesta di token
    final response = await _requestTikTokToken(cleanCode, redirectUri);
    
    // Verifica risposta
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      
      // Verifica errori nella risposta
      if (data.containsKey('error')) {
        print('Error from TikTok: ${data['error']} - ${data['error_description']}');
        
        // Verifica errori specifici per redirect_uri
        if (data['error'] == 'invalid_request' && 
            data['error_description']?.toString().contains('Redirect_uri') == true) {
          if (mounted) {
            _showErrorDebugDialog(
              'TikTok Redirect URI Error',
              'Error: ${data['error']} - ${data['error_description']}\n'
              'Log ID: ${data['log_id']}\n\n'
              'Il redirect URI utilizzato non corrisponde a quello configurato nel portale TikTok.\n'
              'URI utilizzato: $redirectUri\n\n'
              'Assicurati che il redirect URI configurato nel portale TikTok corrisponda esattamente, '
              'incluso lo slash finale.'
            );
          }
        } else if (data['error'] == 'invalid_request') {
          if (mounted) {
            _showErrorDebugDialog(
              'TikTok Token Exchange Error',
              'Error: ${data['error']} - ${data['error_description']}\n'
              'Log ID: ${data['log_id']}\n\n'
              'Questo errore può verificarsi quando:\n'
              '1. La redirect_uri non corrisponde esattamente a quella configurata nel portale TikTok\n'
              '2. Il clientKey o clientSecret non sono corretti\n'
              '3. Il codice di autorizzazione è scaduto o è già stato utilizzato\n'
              '4. I parametri della richiesta non sono formattati correttamente'
            );
          }
        }
        
        throw 'Error from TikTok: ${data['error_description']}';
      }
      
      // Verifica che la risposta contenga i token necessari
      if (!data.containsKey('access_token') || !data.containsKey('refresh_token') || !data.containsKey('open_id')) {
        throw 'Incomplete token response from TikTok: missing required fields';
      }
      
      // Estrai i dati dalla risposta
      final accessToken = data['access_token'];
      final refreshToken = data['refresh_token'];
      final openId = data['open_id'];
      final expiresIn = data['expires_in'];
      final scope = data['scope'];

      print('Successfully obtained TikTok tokens. Open ID: $openId');
      print('Access token: ${accessToken.substring(0, 10)}...');
      print('Token expires in: $expiresIn seconds');
      print('Scope: $scope');

      // Ottieni informazioni utente
      final userInfoUrl = 'https://open.tiktokapis.com/v2/user/info/';
      print('Requesting user info from: $userInfoUrl');
      
      final userInfoResponse = await http.get(
        Uri.parse(userInfoUrl),
        headers: {
          'Authorization': 'Bearer $accessToken',
        },
      );

      print('User info response status: ${userInfoResponse.statusCode}');
      
      if (userInfoResponse.statusCode == 200) {
        final userData = json.decode(userInfoResponse.body);
        Map<String, dynamic> userInfo = {};
        
        // Verifica formato della risposta e estrai i dati utente
        if (userData.containsKey('data') && userData['data'].containsKey('user')) {
          userInfo = userData['data']['user'];
        } else if (userData.containsKey('data')) {
          userInfo = userData['data'];
        } else {
          throw 'Invalid user info response format from TikTok';
        }
        
        if (userInfo.isEmpty) {
          throw 'Empty user info from TikTok';
        }

        print('Extracted user info: $userInfo');

        // Salva l'account nel database Firebase
        final user = FirebaseAuth.instance.currentUser;
        if (user != null) {
          print('Saving TikTok account to Firebase for user: ${user.uid}');
          
          final dbPath = 'users/${user.uid}/social_accounts/tiktok/${openId}';
          print('Database path: $dbPath');
          
          await _database
              .child('users')
              .child(user.uid)
              .child('social_accounts')
              .child('tiktok')
              .child(openId)
              .set({
            'username': userInfo['username'] ?? '',
            'display_name': userInfo['display_name'] ?? '',
            'avatar_url': userInfo['avatar_url'] ?? '',
            'created_at': DateTime.now().millisecondsSinceEpoch,
            'last_sync': DateTime.now().millisecondsSinceEpoch,
            'status': 'active',
            'follower_count': userInfo['follower_count'] ?? 0,
            'following_count': userInfo['following_count'] ?? 0,
            'video_count': userInfo['video_count'] ?? 0,
            'access_token': accessToken,
            'refresh_token': refreshToken,
            'open_id': openId,
            'expires_in': expiresIn,
            'scope': scope,
            'token_expiry': DateTime.now().millisecondsSinceEpoch + (expiresIn * 1000),
          });

          print('TikTok account saved successfully');
          await _loadAccounts();

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('TikTok account connected successfully!')),
            );
          }
        }
      } else {
        print('Failed to get user info: ${userInfoResponse.statusCode}');
        throw 'Failed to get user info from TikTok: ${userInfoResponse.body}';
      }
    } else {
      print('Failed to get access token: ${response.statusCode}');
      
      // Mostra informazioni più dettagliate sull'errore
      if (mounted) {
        _showErrorDebugDialog('Token Exchange Error', response.body);
      }
      
      throw 'Failed to get access token from TikTok: ${response.body}';
    }
  } catch (e) {
    print('Error in _handleAuthCallback: $e');
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error completing TikTok connection: $e')),
      );
    }
  } finally {
    setState(() => _isLoading = false);
  }
}

// 6. Metodo per il refresh del token
Future<bool> _refreshTikTokToken(String accountId, String refreshToken) async {
  try {
    print('Refreshing TikTok token for account: $accountId');
    
    final response = await http.post(
      Uri.parse(tokenUrl),
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cache-Control': 'no-cache',
      },
      body: {
        'client_key': clientKey,
        'client_secret': clientSecret,
        'grant_type': 'refresh_token',
        'refresh_token': refreshToken,
      },
    );
    
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      
      if (data.containsKey('error')) {
        print('Error refreshing token: ${data['error']} - ${data['error_description']}');
        return false;
      }
      
      // Estrai i nuovi token
      final newAccessToken = data['access_token'];
      final newRefreshToken = data['refresh_token'];
      final expiresIn = data['expires_in'];
      
      // Aggiorna i token nel database
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await _database
            .child('users')
            .child(user.uid)
            .child('social_accounts')
            .child('tiktok')
            .child(accountId)
            .update({
          'access_token': newAccessToken,
          'refresh_token': newRefreshToken,
          'expires_in': expiresIn,
          'token_expiry': DateTime.now().millisecondsSinceEpoch + (expiresIn * 1000),
          'last_sync': DateTime.now().millisecondsSinceEpoch,
        });
        
        print('TikTok tokens refreshed successfully');
        return true;
      }
    } else {
      print('Failed to refresh token: ${response.statusCode}');
      print('Response body: ${response.body}');
    }
    
    return false;
  } catch (e) {
    print('Error refreshing TikTok token: $e');
    return false;
  }
}
